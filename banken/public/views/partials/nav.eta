<!-- Navigation -->
<div class="navbar bg-primary text-primary-content sticky top-0 z-50 shadow-lg">

  <div class="navbar-start">
    <div class="dropdown">
      <label tabindex="0" class="btn btn-ghost lg:hidden">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h8m-8 6h16" />
        </svg>
      </label>
      <ul tabindex="0" class="menu menu-sm dropdown-content mt-3 z-[1] p-2 shadow bg-primary rounded-box w-52">
        <li><a href="/"><i class="fas fa-home mr-2"></i>Home</a></li>
        <li><a href="/all-recipes"><i class="fas fa-book mr-2"></i>All Recipes</a></li>
        <li><a href="/my-lists"><i class="fas fa-shopping-basket mr-2"></i>Shopping Lists</a></li>
        <li>
          <details>
            <summary><i class="fas fa-tags mr-2"></i>Categories</summary>
            <ul>
              <li><a>Breakfast</a></li>
              <li><a>Lunch</a></li>
              <li><a>Dinner</a></li>
              <li><a>Desserts</a></li>
              <li><a>Vegetarian</a></li>
              <li><a>Quick Meals</a></li>
            </ul>
          </details>
        </li>
        <% if (it.isAdmin) { %>
        <li><a href="/tilfoj-opskrift"><i class="fas fa-plus-circle mr-2"></i>Add Recipe</a></li>
        <% } %>
      </ul>
    </div>
    <a href="/" class="btn btn-ghost normal-case text-xl">
      <i class="fas fa-utensils mr-2"></i>My Recipe Box
    </a>
  </div>

  <div class="navbar-center hidden lg:flex">
    <ul class="menu menu-horizontal px-1">
      <li><a href="/"><i class="fas fa-home mr-2"></i>Home</a></li>
      <li><a href="/all-recipes"><i class="fas fa-book mr-2"></i>All Recipes</a></li>
      <li><a href="/my-lists"><i class="fas fa-shopping-basket mr-2"></i>Shopping Lists</a></li>
      <li tabindex="0">
        <details>
          <summary><i class="fas fa-tags mr-2"></i>Categories</summary>
          <ul class="p-2 bg-primary text-primary-content">
            <li><a>Breakfast</a></li>
            <li><a>Lunch</a></li>
            <li><a>Dinner</a></li>
            <li><a>Desserts</a></li>
            <li><a>Vegetarian</a></li>
            <li><a>Quick Meals</a></li>
          </ul>
        </details>
      </li>
      <% if (it.isAdmin) { %>
      <li><a href="/tilfoj-opskrift"><i class="fas fa-plus-circle mr-2"></i>Add Recipe</a></li>
      <% } %>
    </ul>
  </div>
  

  <div class="navbar-end gap-2">
    <%~ include("./theme_picker")%>

    <!-- User Icon - Conditional based on login status -->
    <div class="dropdown dropdown-end">
      <label tabindex="0" class="btn btn-ghost btn-circle avatar">
        <i class="fas fa-user-circle text-2xl"></i>
      </label>

      <% if (it.isLoggedIn) { %>
      <!-- If user IS logged in - you would conditionally show this instead -->
      <ul tabindex="0" class="dropdown-content menu menu-sm p-2 shadow bg-primary rounded-box w-52 mt-3" id="user-dropdown">
        <% if (it.isAdmin) {%>
        <li><a href="/admin"><i class="fas fa-user-shield mr-1"></i> Admin</a></li>
        <% } %>
        <li><a><i class="fas fa-cog mr-2"></i> Settings</a></li>
        <li>
          <a id="logout-button">
            <i class="fas fa-sign-out-alt mr-2"></i> Logout
          </a>
        </li>
      </ul>
      <% } else { %>
      <!-- If user is NOT logged in -->
      <ul tabindex="0" class="dropdown-content menu menu-sm p-2 shadow bg-primary rounded-box w-52 mt-3" id="user-dropdown">
        <li>
          <a onclick="document.getElementById('login_modal').showModal()">
            <i class="fas fa-sign-in-alt mr-2"></i> Login
          </a>
        </li>
        <li>
          <a onclick="document.getElementById('register_modal').showModal()">
            <i class="fas fa-user-plus mr-2"></i> Register
          </a>
        </li>
      </ul>
      <% } %>

    </div>
  </div>

</div>

<!-- Login Modal -->
<dialog id="login_modal" class="modal">
  <div class="modal-box">
    <h3 class="font-bold text-lg mb-4">Login to Your Account</h3>

    <!-- Error message container (initially hidden) -->
    <div id="login_error" class="hidden mb-4">
      <div class="alert alert-error">
        <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <span id="error_message"></span>
      </div>
    </div>

    <form id="login_form" action="/api/login" method="post" enctype="application/x-www-form-urlencoded" class="space-y-4">
      <div class="form-control">
        <label class="label" for="username">
          <span class="label-text">Username or Email</span>
        </label>
        <input type="text" name="username" placeholder="Enter your username or email" class="input input-bordered w-full" required />
      </div>

      <div class="form-control">
        <label class="label" for="password">
          <span class="label-text">Password</span>
        </label>
        <input type="password" name="password" placeholder="Enter your password" class="input input-bordered w-full" required />
        <label class="label">
          <a href="#" class="label-text-alt link link-hover">Forgot password?</a>
        </label>
      </div>

      <div class="form-control mt-6">
        <button type="submit" class="btn btn-primary">Login</button>
      </div>
    </form>

    <div class="modal-action absolute top-2 right-2">
      <form method="dialog">
        <button class="btn btn-circle btn-ghost btn-sm">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </form>
    </div>
  </div>

  <!-- Clicking outside closes the modal -->
  <form method="dialog" class="modal-backdrop">
    <button>close</button>
  </form>
</dialog>

<script>
  document.getElementById('logout-button').addEventListener('click', async (e) => {
    e.preventDefault();

    try {
      const response = await fetch('/api/logout', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        window.location.href = '/'; // Redirect after logout
      } else {
        console.error('Logout failed');
      }
    } catch (error) {
      console.error('Error during logout:', error);
    }
  });
</script>

<script>
  document.getElementById('login_form').addEventListener('submit', async (e) => {
    e.preventDefault();
    const form = e.target;
    const errorContainer = document.getElementById('login_error');
    const errorMessage = document.getElementById('error_message');
    const submitButton = form.querySelector('button[type="submit"]');

    // Reset UI state
    errorContainer.classList.add('hidden');
    submitButton.disabled = true;
    const originalButtonText = submitButton.innerHTML;
    submitButton.innerHTML = '<span class="loading loading-spinner"></span> Logging in...';

    try {
      const response = await fetch(form.action, {
        method: 'POST',
        body: new URLSearchParams(new FormData(form)),
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        },
      });

      if (response.ok) {
        // Successful login - handle redirect manually
        const redirectUrl = response.headers.get('Location') || '/';
        window.location.href = redirectUrl;
      } else {
        // Handle error response
        const result = await response.json();

        // Display error message
        errorMessage.textContent = result.message || 'Login failed';
        errorContainer.classList.remove('hidden');

        // Optional: Highlight problematic fields (if using Zod issues)
        if (result.issues) {
          result.issues.forEach(issue => {
            const input = form.querySelector(`[name="${issue.path[0]}"]`);
            if (input) input.classList.add('input-error');
          });
        }
      }
    } catch (error) {
      errorMessage.textContent = 'Network error. Please try again later.';
      errorContainer.classList.remove('hidden');
      console.error('Login error:', error);
    } finally {
      submitButton.disabled = false;
      submitButton.innerHTML = originalButtonText;
    }
  });

  // Remove error styling when user starts typing
  document.querySelectorAll('#login_form input').forEach(input => {
    input.addEventListener('input', () => {
      input.classList.remove('input-error');
    });
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Set theme from localStorage or default to light
    const savedTheme = localStorage.getItem('theme') || 'light';
    document.documentElement.setAttribute('data-theme', savedTheme);
    updateActiveThemeIndicator(savedTheme);

    // Add click handlers for all theme buttons
    document.querySelectorAll('[data-set-theme]').forEach(button => {
      button.addEventListener('click', () => {
        const theme = button.getAttribute('data-set-theme');
        document.documentElement.setAttribute('data-theme', theme);
        localStorage.setItem('theme', theme);
        updateActiveThemeIndicator(theme);
      });
    });

    function updateActiveThemeIndicator(activeTheme) {
      // Hide all checkmarks first
      document.querySelectorAll('.checkmark').forEach(check => {
        check.classList.add('hidden');
      });
      
      // Show checkmark for active theme
      const activeButton = document.querySelector(`[data-set-theme="${activeTheme}"]`);
      if (activeButton) {
        activeButton.querySelector('.checkmark').classList.remove('hidden');
      }
    }
  });
</script>